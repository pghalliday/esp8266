<<: !include ./secrets.yaml

esphome:
  name: dimmer
  platform: ESP8266
  board: d1_mini_pro

wifi:
  ssid: $wifi_ssid
  password: $wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $fallback_ssid
    password: $fallback_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: $api_password

ota:
  password: $ota_password

sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: rotary_encoder_1
    pin_a: D5
    pin_b: D6
    on_value:
      then:
        - lambda: |-
            float dimmer_steps = 20.0;
            if (x != 0.0) {
              id(rotary_encoder_1).set_value(0);
              LightColorValues light_values = id(light_1).remote_values;
              bool is_on = light_values.is_on();
              float current_brightness = is_on ? light_values.get_brightness() : 0.0;
              float new_brightness = current_brightness + (x / dimmer_steps);
              new_brightness = new_brightness < 1.0 ? new_brightness : 1.0;
              if (new_brightness < 1 / dimmer_steps) {
                auto call = id(light_1).turn_off();
                call.set_transition_length(0); // ms
                call.set_brightness(1.0);
                call.perform();
              } else {
                auto call = id(light_1).turn_on();
                call.set_transition_length(100); // ms
                call.set_brightness(new_brightness);
                call.perform();
              }
              delay(100); // ms
            }

binary_sensor:
  - platform: gpio
    pin:
      number: D7
      mode: INPUT_PULLUP
      inverted: True
    name: "Button"
    on_release:
      then:
        - light.toggle: light_1

light:
  - platform: monochromatic
    name: "Light"
    id: light_1
    output: dimmer_module_1

output:
  - platform: esp8266_pwm
    id: dimmer_module_1
    pin: D1
